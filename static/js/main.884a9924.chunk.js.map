{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","className","id","type","defaultChecked","completed","htmlFor","name","Form","useState","setName","onSubmit","e","preventDefault","console","log","autoComplete","FilterButton","aria-pressed","App","taskList","tasks","map","task","alert","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mJAAe,SAASA,EAAKC,GACzB,OACI,qBAAIC,UAAU,mBAAd,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOC,GAAIF,EAAME,GAAIC,KAAK,WAAWC,eAAgBJ,EAAMK,YAC3D,uBAAOJ,UAAU,aAAaK,QAASN,EAAME,GAA7C,SACKF,EAAMO,UAGf,sBAAKN,UAAU,YAAf,UACI,yBAAQE,KAAK,SAASF,UAAU,MAAhC,kBACS,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMO,UAElD,yBAAQJ,KAAK,SAASF,UAAU,kBAAhC,oBACW,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMO,gB,WCZrD,SAASC,EAAKR,GAAQ,IAAD,EACRS,mBAAS,GADD,mBACzBF,EADyB,KACnBG,EADmB,KAQhC,OACI,uBAAMC,SAPV,SAAsBC,GAClBA,EAAEC,iBACFH,EAAS,IACTI,QAAQC,IAAIR,GACZP,EAAMW,SAASJ,IAGf,UACI,oBAAIN,UAAU,gBAAd,SACI,uBAAOK,QAAQ,iBAAiBL,UAAU,YAA1C,sCAIJ,uBACIE,KAAK,OACLD,GAAG,iBACHD,UAAU,kBACVM,KAAK,OACLS,aAAa,QAEjB,wBAAQb,KAAK,SAASF,UAAU,2BAAhC,oBCxBG,SAASgB,IACpB,OACI,yBAAQd,KAAK,SAASF,UAAU,iBAAiBiB,eAAa,OAA9D,UACI,sBAAMjB,UAAU,kBAAhB,mBACA,uCACA,sBAAMA,UAAU,kBAAhB,uBCiCGkB,MAlCf,SAAanB,GAIT,IAAMoB,EAAWpB,EAAMqB,MAAMC,KAAI,SAAAC,GAAI,OACjC,cAACxB,EAAD,CACIG,GAAIqB,EAAKrB,GACTK,KAAMgB,EAAKhB,KACXF,UAAWkB,EAAKlB,WACXkB,EAAKrB,OAGlB,OACI,sBAAKD,UAAU,sBAAf,UACI,2CACA,cAACO,EAAD,CAAMG,SAdd,SAAiBJ,GACbiB,MAAMjB,MAcF,sBAAKN,UAAU,oCAAf,UACI,cAACgB,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,OAEJ,oBAAIf,GAAG,eAAP,+BAGA,oBACID,UAAU,wCACVwB,kBAAgB,eAFpB,SAIKL,QCpBFM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OAAO,cAAC,EAAD,CAAKf,MANR,CACT,CAAEnB,GAAI,SAAUK,KAAM,MAAOF,WAAW,GACxC,CAAEH,GAAI,SAAUK,KAAM,QAASF,WAAW,GAC1C,CAAEH,GAAI,SAAUK,KAAM,SAAUF,WAAW,MAGTgC,SAASC,eAAe,SAK9DZ,K","file":"static/js/main.884a9924.chunk.js","sourcesContent":["export default function Todo(props) {\n    return (\n        <li className=\"todo stack-small\">\n            <div className=\"c-cb\">\n                <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} />\n                <label className=\"todo-label\" htmlFor={props.id}>\n                    {props.name}\n                </label>\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn\">\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n                <button type=\"button\" className=\"btn btn__danger\">\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n            </div>\n        </li>\n    );\n}","import { useState } from \"react\";\n\nexport default function Form(props) {\n    const [name, setName] = useState(0);\n    function handleSubmit(e) {\n        e.preventDefault();\n        setName((10+10));\n        console.log(name);\n        props.onSubmit(name);\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2 className=\"label-wrapper\">\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n                    What needs to be done?\n                </label>\n            </h2>\n            <input\n                type=\"text\"\n                id=\"new-todo-input\"\n                className=\"input input__lg\"\n                name=\"text\"\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n                Add\n            </button>\n        </form>\n    )\n}","export default function FilterButton() {\n    return (\n        <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n            <span className=\"visually-hidden\">Show </span>\n            <span>all</span>\n            <span className=\"visually-hidden\"> tasks</span>\n        </button>\n    )\n}","import Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nfunction App(props) {\n    function addTask(name) {\n        alert(name);\n    }\n    const taskList = props.tasks.map(task => (\n        <Todo\n            id={task.id}\n            name={task.name}\n            completed={task.completed}\n            key={task.id}\n        />\n    ));\n    return (\n        <div className=\"todoapp stack-large\">\n            <h1>TodoMatic</h1>\n            <Form onSubmit={addTask} />\n            <div className=\"filters btn-group stack-exception\">\n                <FilterButton />\n                <FilterButton />\n                <FilterButton />\n            </div>\n            <h2 id=\"list-heading\">\n                3 tasks remaining\n            </h2>\n            <ul\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}