{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","className","id","type","defaultChecked","completed","htmlFor","name","Form","useState","setName","onSubmit","e","preventDefault","console","log","autoComplete","value","onChange","target","FilterButton","aria-pressed","App","tasks","setTasks","taskList","map","task","tasksNoun","length","headingText","newTask","nanoid","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uLAAe,SAASA,EAAKC,GACzB,OACI,qBAAIC,UAAU,mBAAd,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOC,GAAIF,EAAME,GAAIC,KAAK,WAAWC,eAAgBJ,EAAMK,YAC3D,uBAAOJ,UAAU,aAAaK,QAASN,EAAME,GAA7C,SACKF,EAAMO,UAGf,sBAAKN,UAAU,YAAf,UACI,yBAAQE,KAAK,SAASF,UAAU,MAAhC,kBACS,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMO,UAElD,yBAAQJ,KAAK,SAASF,UAAU,kBAAhC,oBACW,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMO,gBCZrD,SAASC,EAAKR,GAAQ,IAAD,EACRS,mBAAS,IADD,mBACzBF,EADyB,KACnBG,EADmB,KAWhC,OACI,uBAAMC,SAPV,SAAsBC,GAClBA,EAAEC,iBACFC,QAAQC,IAAIR,GACZP,EAAMW,SAASJ,GACfG,EAAQ,KAGR,UACI,oBAAIT,UAAU,gBAAd,SACI,uBAAOK,QAAQ,iBAAiBL,UAAU,YAA1C,sCAIJ,uBACIE,KAAK,OACLD,GAAG,iBACHD,UAAU,kBACVM,KAAK,OACLS,aAAa,MACbC,MAAOV,EACPW,SAvBZ,SAAsBN,GAClBF,EAAQE,EAAEO,OAAOF,UAwBb,wBAAQd,KAAK,SAASF,UAAU,2BAAhC,oBC7BG,SAASmB,IACpB,OACI,yBAAQjB,KAAK,SAASF,UAAU,iBAAiBoB,eAAa,OAA9D,UACI,sBAAMpB,UAAU,kBAAhB,mBACA,uCACA,sBAAMA,UAAU,kBAAhB,uB,WCuCGqB,MAtCf,SAAatB,GAAQ,IAAD,EACUS,mBAAST,EAAMuB,OADzB,mBACTA,EADS,KACFC,EADE,KAOVC,EAAWF,EAAMG,KAAI,SAAAC,GAAI,OAC3B,cAAC5B,EAAD,CACIG,GAAIyB,EAAKzB,GACTK,KAAMoB,EAAKpB,KACXF,UAAWsB,EAAKtB,WACXsB,EAAKzB,OAIZ0B,EAAgC,IAApBH,EAASI,OAAe,QAAU,OAC9CC,EAAW,UAAML,EAASI,OAAf,YAAyBD,EAAzB,cACjB,OACI,sBAAK3B,UAAU,sBAAf,UACI,2CACA,cAACO,EAAD,CAAMG,SAnBd,SAAiBJ,GACb,IAAMwB,EAAU,CAAE7B,GAAI,QAAU8B,cAAUzB,KAAMA,EAAMF,WAAW,GACjEmB,EAAS,GAAD,mBAAKD,GAAL,CAAYQ,QAkBhB,sBAAK9B,UAAU,oCAAf,UACI,cAACmB,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,OAEJ,oBAAIlB,GAAG,eAAP,SAAuB4B,IACvB,oBACI7B,UAAU,wCACVgC,kBAAgB,eAFpB,SAIKR,QC1BFS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OAAO,cAAC,EAAD,CAAKrB,MANR,CACT,CAAErB,GAAI,SAAUK,KAAM,MAAOF,WAAW,GACxC,CAAEH,GAAI,SAAUK,KAAM,QAASF,WAAW,GAC1C,CAAEH,GAAI,SAAUK,KAAM,SAAUF,WAAW,MAGTwC,SAASC,eAAe,SAK9DZ,M","file":"static/js/main.a2c8d50f.chunk.js","sourcesContent":["export default function Todo(props) {\r\n    return (\r\n        <li className=\"todo stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn\">\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn__danger\">\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}","import { useState } from \"react\";\r\n\r\nexport default function Form(props) {\r\n    const [name, setName] = useState('');\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        console.log(name);\r\n        props.onSubmit(name);\r\n        setName(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                    What needs to be done?\r\n                </label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"new-todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n                Add\r\n            </button>\r\n        </form>\r\n    )\r\n}","export default function FilterButton() {\r\n    return (\r\n        <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>all</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    )\r\n}","import Todo from \"./components/Todo\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction App(props) {\r\n    const [tasks, setTasks] = useState(props.tasks);\r\n    function addTask(name) {\r\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false}\r\n        setTasks([...tasks, newTask]);\r\n    }\r\n\r\n    const taskList = tasks.map(task => (\r\n        <Todo\r\n            id={task.id}\r\n            name={task.name}\r\n            completed={task.completed}\r\n            key={task.id}\r\n        />\r\n    ));\r\n\r\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n    return (\r\n        <div className=\"todoapp stack-large\">\r\n            <h1>TodoMatic</h1>\r\n            <Form onSubmit={addTask} />\r\n            <div className=\"filters btn-group stack-exception\">\r\n                <FilterButton />\r\n                <FilterButton />\r\n                <FilterButton />\r\n            </div>\r\n            <h2 id=\"list-heading\">{headingText}</h2>\r\n            <ul\r\n                className=\"todo-list stack-large stack-exception\"\r\n                aria-labelledby=\"list-heading\"\r\n            >\r\n                {taskList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst DATA = [\r\n    { id: \"todo-0\", name: \"Eat\", completed: true },\r\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\r\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\r\n];\r\n\r\nReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}